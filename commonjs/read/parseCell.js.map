{"version":3,"file":"parseCell.js","names":["parseCell","node","sheet","xml","values","styles","properties","options","coords","parseCellCoordinates","getAttribute","valueElement","getCellValue","value","textContent","type","hasAttribute","row","column","parseCellValue","getInlineStringValue","getCellInlineStringValue","getInlineStringXml","getOuterXml","getStyleId"],"sources":["../../source/read/parseCell.js"],"sourcesContent":["import parseCellValue from './parseCellValue.js'\n\nimport {\n  parseCellCoordinates\n} from './coordinates.js'\n\nimport {\n  getCellValue,\n  getCellInlineStringValue\n} from '../xml/xlsx.js'\n\nimport {\n  getOuterXml\n} from '../xml/dom.js'\n\n// Example of a `<c/>`ell element:\n//\n// <c>\n//    <f>string</f> — formula.\n//    <v>string</v> — formula pre-computed value.\n//    <is>\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\n//       <r>\n//          <rPr>\n//            ...\n//          </rPr>\n//          <t>string</t>\n//       </r>\n//       <rPh sb=\"1\" eb=\"1\">\n//          <t>string</t>\n//       </rPh>\n//       <phoneticPr fontId=\"1\"/>\n//    </is>\n//    <extLst>\n//       <ext>\n//          <!--any element-->\n//       </ext>\n//    </extLst>\n// </c>\n//\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\n  const coords = parseCellCoordinates(node.getAttribute('r'))\n\n  const valueElement = getCellValue(sheet, node)\n\n  // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\n  let value = valueElement && valueElement.textContent\n\n  let type\n  if (node.hasAttribute('t')) {\n    type = node.getAttribute('t')\n  }\n\n  return {\n    row: coords[0],\n    column: coords[1],\n    value: parseCellValue(value, type, {\n      getInlineStringValue: () => getCellInlineStringValue(sheet, node),\n      getInlineStringXml: () => getOuterXml(node),\n      getStyleId: () => node.getAttribute('s'),\n      styles,\n      values,\n      properties,\n      options\n    })\n  }\n}"],"mappings":";;;;;;AAAA;AAEA;AAIA;AAKA;AAEsB;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,SAAS,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACvF,IAAMC,MAAM,GAAG,IAAAC,iCAAoB,EAACR,IAAI,CAACS,YAAY,CAAC,GAAG,CAAC,CAAC;EAE3D,IAAMC,YAAY,GAAG,IAAAC,kBAAY,EAACV,KAAK,EAAED,IAAI,CAAC;;EAE9C;EACA;EACA;EACA,IAAIY,KAAK,GAAGF,YAAY,IAAIA,YAAY,CAACG,WAAW;EAEpD,IAAIC,IAAI;EACR,IAAId,IAAI,CAACe,YAAY,CAAC,GAAG,CAAC,EAAE;IAC1BD,IAAI,GAAGd,IAAI,CAACS,YAAY,CAAC,GAAG,CAAC;EAC/B;EAEA,OAAO;IACLO,GAAG,EAAET,MAAM,CAAC,CAAC,CAAC;IACdU,MAAM,EAAEV,MAAM,CAAC,CAAC,CAAC;IACjBK,KAAK,EAAE,IAAAM,0BAAc,EAACN,KAAK,EAAEE,IAAI,EAAE;MACjCK,oBAAoB,EAAE;QAAA,OAAM,IAAAC,8BAAwB,EAACnB,KAAK,EAAED,IAAI,CAAC;MAAA;MACjEqB,kBAAkB,EAAE;QAAA,OAAM,IAAAC,gBAAW,EAACtB,IAAI,CAAC;MAAA;MAC3CuB,UAAU,EAAE;QAAA,OAAMvB,IAAI,CAACS,YAAY,CAAC,GAAG,CAAC;MAAA;MACxCL,MAAM,EAANA,MAAM;MACND,MAAM,EAANA,MAAM;MACNE,UAAU,EAAVA,UAAU;MACVC,OAAO,EAAPA;IACF,CAAC;EACH,CAAC;AACH"}