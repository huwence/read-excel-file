{"version":3,"file":"parseCellValue.js","names":["parseCellValue","value","type","getInlineStringValue","getInlineStringXml","getStyleId","styles","values","properties","options","parseString","undefined","Error","sharedStringIndex","Number","isNaN","length","decodeError","parsedDate","Date","valueOf","parsedNumber","isDateTimestamp","parseDate","TypeError","errorCode","trim"],"sources":["../../source/read/parseCellValue.js"],"sourcesContent":["import parseDate from './parseDate.js'\nimport isDateTimestamp from './isDateTimestamp.js'\n\n// Parses a string `value` of a cell.\nexport default function parseCellValue(value, type, {\n  getInlineStringValue,\n  getInlineStringXml,\n  getStyleId,\n  styles,\n  values,\n  properties,\n  options\n}) {\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n'\n  }\n\n  // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n  switch (type) {\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\n    // using \"s\" cell type (for saving on strage space).\n    // \"str\" cell type is then generally only used for storing\n    // formula-pre-calculated cell values.\n    case 'str':\n      value = parseString(value, options)\n      break\n\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\n    // Perhaps the specification doesn't force it to use one or another.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\n    case 'inlineStr':\n      value = getInlineStringValue()\n      if (value === undefined) {\n        throw new Error(`Unsupported \"inline string\" cell value structure: ${getInlineStringXml()}`)\n      }\n      value = parseString(value, options)\n      break\n\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      const sharedStringIndex = Number(value)\n      if (isNaN(sharedStringIndex)) {\n        throw new Error(`Invalid \"shared\" string index: ${value}`)\n      }\n      if (sharedStringIndex >= values.length) {\n        throw new Error(`An out-of-bounds \"shared\" string index: ${value}`)\n      }\n      value = values[sharedStringIndex]\n      value = parseString(value, options)\n      break\n\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\n    // in cells of type \"b\".\n    case 'b':\n      if (value === '1') {\n        value = true\n      } else if (value === '0') {\n        value = false\n      } else {\n        throw new Error(`Unsupported \"boolean\" cell value: ${value}`)\n      }\n      break\n\n    // XLSX specification seems to support cells of type \"z\":\n    // blank \"stub\" cells that should be ignored by data processing utilities.\n    case 'z':\n      value = undefined\n      break\n\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\n    // It's not clear what that means though.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n    case 'e':\n      value = decodeError(value)\n      break\n\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\n    // I haven't seen an XLSX file having such cells.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\n    case 'd':\n      if (value === undefined) {\n        break\n      }\n      const parsedDate = new Date(value)\n      if (isNaN(parsedDate.valueOf())) {\n        throw new Error(`Unsupported \"date\" cell value: ${value}`)\n      }\n      value = parsedDate\n      break\n\n    // Numeric cells have type \"n\".\n    case 'n':\n      if (value === undefined) {\n        break\n      }\n      const parsedNumber = Number(value)\n      if (isNaN(parsedNumber)) {\n        throw new Error(`Invalid \"numeric\" cell value: ${value}`)\n      }\n      value = parsedNumber\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\n      if (isDateTimestamp(value, getStyleId(), styles, options)) {\n        // Parse the number as a date timestamp.\n        value = parseDate(value, properties)\n      }\n      break\n\n    default:\n      throw new TypeError(`Cell type not supported: ${type}`)\n  }\n\n  // Convert empty values to `null`.\n  if (value === undefined) {\n    value = null\n  }\n\n  return value\n}\n\n// Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!'\n    case 0x07:\n      return '#DIV/0!'\n    case 0x0F:\n      return '#VALUE!'\n    case 0x17:\n      return '#REF!'\n    case 0x1D:\n      return '#NAME?'\n    case 0x24:\n      return '#NUM!'\n    case 0x2A:\n      return '#N/A'\n    case 0x2B:\n      return '#GETTING_DATA'\n    default:\n      // Such error code doesn't exist. I made it up.\n      return `#ERROR_${errorCode}`\n  }\n}\n\nfunction parseString(value, options) {\n  // In some weird cases, a developer might want to disable\n  // the automatic trimming of all strings.\n  // For example, leading spaces might express a tree-like hierarchy.\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\n  if (options.trim !== false) {\n    value = value.trim()\n  }\n  if (value === '') {\n    value = undefined\n  }\n  return value\n}"],"mappings":"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"}