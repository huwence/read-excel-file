{"version":3,"file":"unpackXlsxFileNode.js","names":["unpackXlsxFile","input","entries","stream","Stream","Buffer","Readable","from","fs","createReadStream","Promise","resolve","reject","entryPromises","on","pipe","unzip","Parse","all","then","entry","contents","push","setEncoding","data","toString","path"],"sources":["../../source/read/unpackXlsxFileNode.js"],"sourcesContent":["import fs from 'fs'\nimport Stream, { Readable } from 'stream'\nimport unzip from 'unzipper'\n\n/**\n * Reads XLSX file in Node.js.\n * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.\n * @return {Promise} Resolves to an object holding XLSX file entries.\n */\nexport default function unpackXlsxFile(input) {\n  // XLSX file is a zip archive.\n  // The `entries` object stores the files\n  // and their contents from this XLSX zip archive.\n  const entries = {}\n\n  const stream = input instanceof Stream\n    ? input\n    : (\n      input instanceof Buffer\n        ? Readable.from(input)\n        : fs.createReadStream(input)\n    )\n\n  return new Promise((resolve, reject) => {\n    const entryPromises = []\n\n    stream\n      // This first \"error\" listener is for the original stream errors.\n      .on('error', reject)\n      .pipe(unzip.Parse())\n      // This second \"error\" listener is for the unzip stream errors.\n      .on('error', reject)\n      .on('close', () =>  Promise.all(entryPromises).then(() => resolve(entries)))\n      .on('entry', (entry) => {\n        let contents = ''\n        // To ignore an entry: `entry.autodrain()`.\n        entryPromises.push(new Promise((resolve) => {\n          // It's not clear what encoding are the files inside XLSX in.\n          // https://stackoverflow.com/questions/45194771/are-xlsx-files-utf-8-encoded-by-definition\n          // For example, for XML files, encoding is specified at the top node:\n          // `<?xml version=\"1.0\" encoding=\"UTF-8\"/>`.\n          //\n          // `unzipper` supports setting encoding when reading an `entry`.\n          // https://github.com/ZJONSSON/node-unzipper/issues/35\n          // https://gitlab.com/catamphetamine/read-excel-file/-/issues/54\n          //\n          // If the `entry.setEncoding('utf8')` line would be commented out,\n          // there's a `nonAsciiCharacterEncoding` test that wouldn't pass.\n          //\n          entry.setEncoding('utf8')\n          //\n          entry\n            .on('data', data => contents += data.toString())\n            .on('end', () => resolve(entries[entry.path] = contents))\n        }))\n      })\n  })\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AAA4B;AAAA;AAAA;AAE5B;AACA;AACA;AACA;AACA;AACe,SAASA,cAAc,CAACC,KAAK,EAAE;EAC5C;EACA;EACA;EACA,IAAMC,OAAO,GAAG,CAAC,CAAC;EAElB,IAAMC,MAAM,GAAGF,KAAK,YAAYG,kBAAM,GAClCH,KAAK,GAELA,KAAK,YAAYI,MAAM,GACnBC,gBAAQ,CAACC,IAAI,CAACN,KAAK,CAAC,GACpBO,cAAE,CAACC,gBAAgB,CAACR,KAAK,CAC9B;EAEH,OAAO,IAAIS,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtC,IAAMC,aAAa,GAAG,EAAE;IAExBV;IACE;IAAA,CACCW,EAAE,CAAC,OAAO,EAAEF,MAAM,CAAC,CACnBG,IAAI,CAACC,oBAAK,CAACC,KAAK,EAAE;IACnB;IAAA,CACCH,EAAE,CAAC,OAAO,EAAEF,MAAM,CAAC,CACnBE,EAAE,CAAC,OAAO,EAAE;MAAA,OAAOJ,OAAO,CAACQ,GAAG,CAACL,aAAa,CAAC,CAACM,IAAI,CAAC;QAAA,OAAMR,OAAO,CAACT,OAAO,CAAC;MAAA,EAAC;IAAA,EAAC,CAC3EY,EAAE,CAAC,OAAO,EAAE,UAACM,KAAK,EAAK;MACtB,IAAIC,QAAQ,GAAG,EAAE;MACjB;MACAR,aAAa,CAACS,IAAI,CAAC,IAAIZ,OAAO,CAAC,UAACC,OAAO,EAAK;QAC1C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAS,KAAK,CAACG,WAAW,CAAC,MAAM,CAAC;QACzB;QACAH,KAAK,CACFN,EAAE,CAAC,MAAM,EAAE,UAAAU,IAAI;UAAA,OAAIH,QAAQ,IAAIG,IAAI,CAACC,QAAQ,EAAE;QAAA,EAAC,CAC/CX,EAAE,CAAC,KAAK,EAAE;UAAA,OAAMH,OAAO,CAACT,OAAO,CAACkB,KAAK,CAACM,IAAI,CAAC,GAAGL,QAAQ,CAAC;QAAA,EAAC;MAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;AACJ"}