{"version":3,"file":"readXlsx.js","names":["parseProperties","parseFilePaths","parseStyles","parseSharedStrings","parseSheet","getData","readXlsx","contents","xml","options","sheet","getXmlFileContent","filePath","Error","filePaths","values","sharedStrings","styles","properties","getSheets","sheets","map","name","sheetId","getSheetId","createSheetNotFoundError","data","mergedCells","_sheet","relationId","sheetsList","i","join"],"sources":["../../source/read/readXlsx.js"],"sourcesContent":["import parseProperties from './parseProperties.js'\nimport parseFilePaths from './parseFilePaths.js'\nimport parseStyles from './parseStyles.js'\nimport parseSharedStrings from './parseSharedStrings.js'\nimport parseSheet from './parseSheet.js'\nimport getData from './getData.js'\n\n// For an introduction in reading `*.xlsx` files see \"The minimum viable XLSX reader\":\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\n\n/**\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\n */\nexport default function readXlsx(contents, xml, options = {}) {\n  if (!options.sheet) {\n    options = {\n      sheet: 1,\n      ...options\n    }\n  }\n\n  const getXmlFileContent = (filePath) => {\n    if (!contents[filePath]) {\n      throw new Error(`\"${filePath}\" file not found inside the *.xlsx file zip archive`)\n    }\n    return contents[filePath]\n  }\n\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\n  // https://github.com/tidyverse/readxl/issues/104\n  const filePaths = parseFilePaths(getXmlFileContent('xl/_rels/workbook.xml.rels'), xml)\n\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\n  const values = filePaths.sharedStrings\n    ? parseSharedStrings(getXmlFileContent(filePaths.sharedStrings), xml)\n    : []\n\n  // Default file path for \"styles\": \"xl/styles.xml\".\n  const styles = filePaths.styles\n    ? parseStyles(getXmlFileContent(filePaths.styles), xml)\n    : {}\n\n  const properties = parseProperties(getXmlFileContent('xl/workbook.xml'), xml)\n\n  // A feature for getting the list of sheets in an Excel file.\n  // https://github.com/catamphetamine/read-excel-file/issues/14\n  if (options.getSheets) {\n    return properties.sheets.map(({ name }) => ({\n      name\n    }))\n  }\n\n  // Find the sheet by name, or take the first one.\n  const sheetId = getSheetId(options.sheet, properties.sheets)\n\n  // If the sheet wasn't found then throw an error.\n  // Example: \"xl/worksheets/sheet1.xml\".\n  if (!sheetId || !filePaths.sheets[sheetId]) {\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\n  }\n\n  // Parse sheet data.\n  const sheet = parseSheet(\n    getXmlFileContent(filePaths.sheets[sheetId]),\n    xml,\n    values,\n    styles,\n    properties,\n    options\n  )\n\n  // Get spreadsheet data.\n  const data = getData(sheet, options)\n\n  // Can return properties, if required.\n  if (options.properties) {\n    return {\n      data,\n      mergedCells: sheet.mergedCells,\n      properties\n    }\n  }\n\n  // Return spreadsheet data.\n  return data\n}\n\nfunction getSheetId(sheet, sheets) {\n  if (typeof sheet === 'number') {\n    const _sheet = sheets[sheet - 1]\n    return _sheet && _sheet.relationId\n  }\n  for (const _sheet of sheets) {\n    if (_sheet.name === sheet) {\n      return _sheet.relationId\n    }\n  }\n}\n\nfunction createSheetNotFoundError(sheet, sheets) {\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\n}"],"mappings":"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"}