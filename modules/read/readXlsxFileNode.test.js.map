{"version":3,"file":"readXlsxFileNode.test.js","names":["path","readXlsxFileNode","describe","it","schema","prop","type","Date","Number","required","Boolean","String","parse","value","rowMap","resolve","then","rows","date","getTime","should","deep","equal","convertToUTCTimezone","numberOfStudents","course","isFree","cost","title","contact","map","errors","getTimezoneOffset"],"sources":["../../source/read/readXlsxFileNode.test.js"],"sourcesContent":["import path from 'path'\n\nimport readXlsxFileNode from './readXlsxFileNode.js'\n\ndescribe('readXlsxFileNode', () => {\n\tit('should read *.xlsx file on Node.js and parse it to JSON', () => {\n\t\tconst schema = {\n\t\t\t'START DATE': {\n\t\t\t\tprop: 'date',\n\t\t\t\ttype: Date\n\t\t\t},\n\t\t\t'NUMBER OF STUDENTS': {\n\t\t\t\tprop: 'numberOfStudents',\n\t\t\t\ttype: Number,\n\t\t\t\trequired: true\n\t\t\t},\n\t\t\t'COURSE': {\n\t\t\t\tprop: 'course',\n\t\t\t\ttype: {\n\t\t\t\t\t'IS FREE': {\n\t\t\t\t\t\tprop: 'isFree',\n\t\t\t\t\t\ttype: Boolean\n\t\t\t\t\t\t// Excel stored booleans as numbers:\n\t\t\t\t\t\t// `1` is `true` and `0` is `false`.\n\t\t\t\t\t\t// Such numbers are parsed to booleans.\n\t\t\t\t\t},\n\t\t\t\t\t'COST': {\n\t\t\t\t\t\tprop: 'cost',\n\t\t\t\t\t\ttype: Number\n\t\t\t\t\t},\n\t\t\t\t\t'COURSE TITLE': {\n\t\t\t\t\t\tprop: 'title',\n\t\t\t\t\t\ttype: String\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'CONTACT': {\n\t\t\t\tprop: 'contact',\n\t\t\t\trequired: true,\n\t\t\t\tparse(value) {\n\t\t\t\t\treturn '+11234567890'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst rowMap = []\n\n\t\treturn readXlsxFileNode(path.resolve('./test/spreadsheets/course.xlsx'), { schema, rowMap }).then(({ rows }) => {\n\t\t\trows[0].date = rows[0].date.getTime()\n\t\t\trows.should.deep.equal([{\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24)).getTime(),\n\t\t\t\tnumberOfStudents: 123,\n\t\t\t\tcourse: {\n\t\t\t\t\tisFree: false,\n\t\t\t\t\tcost: 210.45,\n\t\t\t\t\ttitle: 'Chemistry'\n\t\t\t\t},\n\t\t\t\tcontact: '+11234567890'\n\t\t\t}])\n\t\t\trowMap.should.deep.equal([0, 1])\n\t\t})\n\t})\n\n\tit('should read *.xlsx file on Node.js and map it to JSON', () => {\n\t\tconst map = {\n\t\t\t'START DATE': 'date',\n\t\t\t'NUMBER OF STUDENTS': 'numberOfStudents',\n\t\t\t'COURSE': {\n\t\t\t\t'course': {\n\t\t\t\t\t'IS FREE': 'isFree',\n\t\t\t\t\t'COST': 'cost',\n\t\t\t\t\t'COURSE TITLE': 'title'\n\t\t\t\t}\n\t\t\t},\n\t\t\t'CONTACT': 'contact'\n\t\t}\n\n\t\tconst rowMap = []\n\n\t\treturn readXlsxFileNode(path.resolve('./test/spreadsheets/course.xlsx'), { map, rowMap }).then(({ rows, errors }) => {\n\t\t\terrors.should.deep.equal([])\n\t\t\trows[0].date = rows[0].date.getTime()\n\t\t\trows.should.deep.equal([{\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24)).getTime(),\n\t\t\t\tnumberOfStudents: 123,\n\t\t\t\tcourse: {\n\t\t\t\t\tisFree: false,\n\t\t\t\t\tcost: 210.45,\n\t\t\t\t\ttitle: 'Chemistry'\n\t\t\t\t},\n\t\t\t\tcontact: '(123) 456-7890'\n\t\t\t}])\n\t\t\trowMap.should.deep.equal([0, 1])\n\t\t})\n\t})\n})\n\n// Converts timezone to UTC while preserving the same time\nfunction convertToUTCTimezone(date) {\n\t// Doesn't account for leap seconds but I guess that's ok\n\t// given that javascript's own `Date()` does not either.\n\t// https://www.timeanddate.com/time/leap-seconds-background.html\n\t//\n\t// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n\t//\n\treturn new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000)\n}\n"],"mappings":"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"}